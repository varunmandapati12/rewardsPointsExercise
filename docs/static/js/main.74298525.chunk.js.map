{"version":3,"sources":["helper.js","components/rewards.js","index.js"],"names":["months","getReward","amount","getTotalRewards","transactions","length","reduce","acc","key","getRewardPerMonth","last3MonthRewards","i","filteredList","filter","t","Date","date","getMonth","month","total","rewardsByCustomer","groupByCustomer","cust","customer","push","transactionsDetails","customerId","last3Month","totalReward","name","rewardPerMonth","Rewards","createTable","data","map","d","className","colspan","this","props","Component","App","render","document","getElementById"],"mappings":"kLAAMA,EAAS,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGIC,EAAY,SAAAC,GAChB,OAAIA,GAAU,IAAMA,EAAS,IACpBA,EAAS,GACPA,GAAU,IACZ,GAAKA,EAAS,KAAO,GAEvB,GAGHC,EAAkB,SAAAC,GACtB,OAAOA,EAAaC,OAChBD,EAAaE,QAAO,SAACC,EAAKC,GAAN,OAAcP,EAAUO,EAAIN,QAAUK,IAAK,GAC/D,GAGAE,EAAoB,SAAAL,GAExB,IADA,IAAIM,EAAoB,GADgB,WAE/BC,GACP,IAAIC,EAAeR,EAAaS,QAC9B,SAAAC,GAAC,OAAI,IAAIC,KAAKD,EAAEE,MAAMC,cAAe,IAAIF,MAAOE,WAAaN,KAG/DD,EAAkBC,GAAK,CACrBO,MAAOlB,GAAO,IAAIe,MAAOE,WAAaN,GACtCQ,MAAOP,EAAaN,QAAO,SAACC,EAAKC,GAAN,OAAcP,EAAUO,EAAIN,QAAUK,IAAK,GACtEH,aAAcQ,IARTD,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAYT,OAAOD,GA8BMU,EA3BW,SAAAhB,GACxB,IAAIiB,EAAkBjB,EAAaE,QACjC,SAACgB,EAAD,GAAuC,IAA9BC,EAA6B,EAA7BA,SAAUrB,EAAmB,EAAnBA,OAAQc,EAAW,EAAXA,KAKzB,OAJKM,EAAKC,KACRD,EAAKC,GAAY,IAEnBD,EAAKC,GAAUC,KAAK,CAAEtB,SAAQc,SACvBM,IAET,IAGEG,EAAsB,GAE1B,IAAK,IAAIC,KAAcL,EAAiB,CACtC,IAAIM,EAAalB,EAAkBY,EAAgBK,IAC/CE,EAAczB,EAAgBkB,EAAgBK,IAClDD,EAAoBD,KAAK,CACvBK,KAAMH,EACNI,eAAgBH,EAChBC,YAAaA,IAIjB,OAAOH,GCKMM,E,4MAxEbC,YAAc,SAAAC,GACZ,OACE,kBAAC,WAAD,KACGA,EAAKC,KAAI,SAAAC,GAAC,OACT,4BACE,wBAAIC,UAAU,kBAAkBD,EAAEjB,OAClC,wBAAIkB,UAAU,gBACZ,2BAAOA,UAAU,gBACf,4BACE,wCACA,uCAEDD,EAAE/B,aAAaC,OACd8B,EAAE/B,aAAa8B,KAAI,SAACpB,EAAGH,GAAJ,OACjB,4BACE,4BAAKA,EAAI,GACT,4BAAKG,EAAEZ,YAIX,4BACE,wBAAImC,QAAQ,IAAID,UAAU,WAA1B,cAOR,wBAAIA,UAAU,kBAAkBD,EAAEhB,a,uDAOlC,IAAD,OACCf,EAAiBkC,KAAKC,MAAtBnC,aACR,OACE,2BAAOgC,UAAU,sCACf,+BACE,4BACE,6CACA,mDACA,8CAGJ,+BACGhC,EAAaC,OACZe,EAAkBhB,GAAc8B,KAAI,SAAAX,GAAQ,OAC1C,4BACE,wBAAIa,UAAU,kBAAkBb,EAASM,MACzC,wBAAIO,UAAU,gBACZ,2BAAOA,UAAU,gBACd,EAAKJ,YAAYT,EAASO,kBAG/B,wBAAIM,UAAU,kBAAkBb,EAASK,iBAI7C,4BACE,wBAAIS,QAAQ,IAAID,UAAU,WAA1B,4B,GA9DQI,a,OCKhBC,G,mLAEF,OACE,6BACE,2BACE,iDAEF,kBAAC,EAAD,CAASrC,aAAc6B,S,GAPbO,cAalBE,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.74298525.chunk.js","sourcesContent":["const months = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\"\r\n];\r\n\r\nconst getReward = amount => {\r\n  if (amount >= 50 && amount < 100) {\r\n    return amount - 50;\r\n  } else if (amount >= 100) {\r\n    return 2 * (amount - 100) + 50;\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst getTotalRewards = transactions => {\r\n  return transactions.length\r\n    ? transactions.reduce((acc, key) => getReward(key.amount) + acc, 0)\r\n    : 0;\r\n};\r\n\r\nconst getRewardPerMonth = transactions => {\r\n  let last3MonthRewards = [];\r\n  for (let i = 0; i < 3; i++) {\r\n    let filteredList = transactions.filter(\r\n      t => new Date(t.date).getMonth() === new Date().getMonth() - i\r\n    );\r\n \r\n    last3MonthRewards[i] = {\r\n      month: months[new Date().getMonth() - i],\r\n      total: filteredList.reduce((acc, key) => getReward(key.amount) + acc, 0),\r\n      transactions: filteredList\r\n    };\r\n  }\r\n\r\n  return last3MonthRewards;\r\n};\r\n\r\nconst rewardsByCustomer = transactions => {\r\n  let groupByCustomer = transactions.reduce(\r\n    (cust, { customer, amount, date }) => {\r\n      if (!cust[customer]) {\r\n        cust[customer] = [];\r\n      }\r\n      cust[customer].push({ amount, date });\r\n      return cust;\r\n    },\r\n    {}\r\n  );\r\n\r\n  let transactionsDetails = [];\r\n\r\n  for (let customerId in groupByCustomer) {\r\n    let last3Month = getRewardPerMonth(groupByCustomer[customerId]);\r\n    let totalReward = getTotalRewards(groupByCustomer[customerId]);\r\n    transactionsDetails.push({\r\n      name: customerId,\r\n      rewardPerMonth: last3Month,\r\n      totalReward: totalReward\r\n    });\r\n  }\r\n\r\n  return transactionsDetails;\r\n};\r\n\r\nexport default rewardsByCustomer;","import React, { Component, Fragment } from \"react\";\r\nimport rewardsByCustomer from \"../helper\";\r\n\r\nclass Rewards extends Component {\r\n  createTable = data => {\r\n    return (\r\n      <Fragment>\r\n        {data.map(d => (\r\n          <tr>\r\n            <td className=\"v-align-middle\">{d.month}</td>\r\n            <td className=\"nested-table\">\r\n              <table className=\"nested-table\">\r\n                <tr>\r\n                  <th>Trans Id</th>\r\n                  <th>Amount</th>\r\n                </tr>\r\n                {d.transactions.length ? (\r\n                  d.transactions.map((t, i) => (\r\n                    <tr>\r\n                      <td>{i + 1}</td>\r\n                      <td>{t.amount}</td>\r\n                    </tr>\r\n                  ))\r\n                ) : (\r\n                  <tr>\r\n                    <td colspan=\"2\" className=\"no-data\">\r\n                      No Data\r\n                    </td>\r\n                  </tr>\r\n                )}\r\n              </table>\r\n            </td>\r\n            <td className=\"v-align-middle\">{d.total}</td>\r\n          </tr>\r\n        ))}\r\n      </Fragment>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { transactions } = this.props;\r\n    return (\r\n      <table className=\"table table-bordered table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>Customer Name</th>\r\n            <th>Last 3 Month Reward</th>\r\n            <th>Total Reward</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {transactions.length ? (\r\n            rewardsByCustomer(transactions).map(customer => (\r\n              <tr>\r\n                <td className=\"v-align-middle\">{customer.name}</td>\r\n                <td className=\"nested-table\">\r\n                  <table className=\"nested-table\">\r\n                    {this.createTable(customer.rewardPerMonth)}\r\n                  </table>\r\n                </td>\r\n                <td className=\"v-align-middle\">{customer.totalReward}</td>\r\n              </tr>\r\n            ))\r\n          ) : (\r\n            <tr>\r\n              <td colspan=\"3\" className=\"no-data\">\r\n                \"No Transactions\"\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Rewards;\r\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nimport Rewards from './components/rewards';\nimport data from './data/transactions';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './style.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <p>\n          <h1>Customer Rewards</h1>\n        </p>\n        <Rewards transactions={data}/>\n      </div>\n    );\n  }\n}\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}